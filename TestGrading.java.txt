package com.britebill.peerreview;

import com.britebill.peerreview.thirdparty.Answer;
import com.britebill.peerreview.thirdparty.AnswerValidation;
import com.britebill.peerreview.thirdparty.Test;
import com.britebill.peerreview.thirdparty.TestRepo;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import java.awt.List;

import java.io.IOException;

@SuppressWarnings("Duplicates")
@Service
public class TestGrading {

    private Test test;
    private int grade = 0;

    public int ProcessTest(int id){
        test = TestRepo.getTest(id);
        check(test.getAsnwers(), test.getAsnwers().size());
        return passfail();
    }

    private int check(java.util.List<Answer> answers, int population){
        for(int i = 0 ; i<population ; i++){
            try {
                grade = new AnswerValidation().grade(answers.get(i));
            } catch (IOException e) {
                LoggerFactory.getLogger("BB").error(e.getLocalizedMessage());
            } catch (Throwable e){
                LoggerFactory.getLogger("BB-generic").error(e.getLocalizedMessage());
            }
        }

        /*this condition can be replaced by a ternary operator example : test.setStatus(grade < 5 ? "Failed" : "Passed"); That way you cut some lines of your code and makes it cleanner*/
        if(grade < 5){
            test.setStatus("Failed");
        }


        return grade;
    }

    /*this function could be replaced by nested ternary operator on return expression of ProcessTest function, example: return (grade > 8 ? 2 : grade > 5 ? 1 : 0); That way you dont need a whole function to calculate a small condition*/
    public int passfail(){

        int pass = 0;
        if(grade > 8){
            pass = 2;
        }
	
        //this condition can be removed, because it is not changing the initial value of pass.
        if(grade <5){
            pass = 0;
        }


        if(grade > 5){
            pass = 1;
        }

      return pass;
    }
}
/*Always keep your code clean, avoid to create operations that would not change nothing and avoid to create large things to solve small problems*/